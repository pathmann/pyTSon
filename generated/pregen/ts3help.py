from pydoc import help as pydochelp
import ts3lib


def help(obj):
    """
    This is a wrapper around pydoc.help to display docstrings for the ts3 module.
    Note: Adding the docstrings directly in the cpython module blows up the data segment of the pyTSon library.
    """
    if hasattr(obj, "__module__") and obj.__module__ == "ts3lib":
        name = getattr(obj, "__name__", None)

        txt = ""
        if name:
            if name == "requestRenameFile":
                txt = "Renames a file or moves it to another channel.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param fromChannelID: the ID of the channel, the file is currently placed in\n@type fromChannelID: int\n@param channelPW: the password of the channel, the file is currently placed in, pass an empty string if channel is not password protected\n@type channelPW: string\n@param toChannelID: the ID of the channel, the file should be placed in after, pass 0, if just renaming, not moving\n@type toChannelID: int\n@param toChannelPW: the password of the channel, to which the file should move to, pass an empty string if channel is not password protected; this is ignored, if just renaming, not moving\n@type toChannelPW: string\n@param oldFile: the complete path to the file\n@type oldFile: string\n@param newFile: the complete path to the new filename\n@type newFile: string\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getClientLibVersionNumber":
                txt = "Returns the clientlib's version number\n@return: A tuple, containing the errorcode and the result\n@rtype: tuple (int, int)\n"
            elif name == "getHotkeyFromKeyword":
                txt = "\n@param keywords:\n@type keywords:\n@return:\n@rtype:\n"
            elif name == "requestSendChannelTextMsg":
                txt = "Sends a text message to all clients in a channel.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param message: the message to send\n@type message: string\n@param targetChannelID: the ID of the channel\n@type targetChannelID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getPreProcessorConfigValue":
                txt = "Querie a sound preprocessor flag and returns it as string.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param ident: the flag to be queried\n@type ident: string\n@return: A tuple, containing the errorcode and the value of the queried flag\n@rtype: tuple (int, string)\n"
            elif name == "closePlaybackDevice":
                txt = "Closes a playback device on a serverconnection.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@return: the errorcode\n@rtype: int\n"
            elif name == "startConnection":
                txt = "Starts a connection to the given server.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param identity: the client's identity\n@type identity: string\n@param ip: hostname or ip of the server\n@type ip: string\n@param port: port of the server\n@type port: int\n@param nickname: the client's nickname\n@type nickname: string\n@param defaultChannelArray: list of strings defining the path to a channel on the server, pass empty list to join in server's default channel\n@type defaultChannelArray: list [string]\n@param defaultChannelPassword: password of the default channel, pass an empty string if not using defaultChannelArray or channel is not password protected\n@type defaultChannelPassword: string\n@param serverPassword: password of the server, pass an empty string if the server is not password protected\n@type serverPassword: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "banclient":
                txt = "@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientID: the ID of the client\n@type clientID: int\n@param timeInSeconds: the time, the client should be banned for, pass 0 to add a permanent ban\n@type timeInSeconds: int\n@param banReason: the reason for the ban\n@type banReason: string\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getAvatar":
                txt = "Returns the path on the system to the avatar image file of a client.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientID: the ID of the client\n@type clientID: int\n@param maxLen: length of the buffer, passed to the clientlib to store the path to, default value is 256\n@type maxLen: int\n@return: a tuple, containing the errorcode and the path to the avatar\n@rtype: tuple (int, string)\n"
            elif name == "getChannelClientList":
                txt = "Returns all clients in a specified channel.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelID: the ID of the channel\n@type channelID: int\n@return: a tuple, containing the errorcode and a list of client IDs or None if the call failed\n@rtype: tuple (int, [int]) or tuple(int, None)\n"
            elif name == "flushClientSelfUpdates":
                txt = "Flushes the changes made by the setClientSelfVariable-functions to the server.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getCaptureModeList":
                txt = "Queries all available capture modes.\n@return: A tuple, containing the errorcode and the list of capture modes\n@rtype: tuple (int, [string])\n"
            elif name == "createReturnCode":
                txt = "Creates a returnCode which can be passed to the other functions and will be passed to the event onServerErrorEvent.\n@param maxLen: length of the buffer, passed to the clientlib to store the path to, default value is 256\n@type maxLen: int\n@return: the created returnCode\n@rtype: string\n"
            elif name == "requestServerGroupDel":
                txt = "Deletes a servergroup.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param serverGroupID: the ID of the servergroup\n@type serverGroupID: int\n@param force: if set to 1 (or True), even if there are users assigned to this servergroup, it will be deleted\n@type force: int or bool\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return:\n@rtype:\n"
            elif name == "requestChannelPermList":
                txt = "Requests the list of permissions assigned to a channel. The events onChannelPermListEvent and onChannelPermListFinishedEvent will be triggered.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelID: the ID of the channel\n@type channelID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getServerVersion":
                txt = "Returns the server version.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@return: the server version\n@rtype: int\n"
            elif name == "getTransferStatus":
                txt = "Returns the status of a filetransfer, whether if it is initialising, active or finished see ts3defines.FileTransferState\n@param transferID: the ID of the filetransfer\n@type transferID: int\n@return: a tuple, containing the errorcode and the status\n@rtype: tuple (int, int)\n"
            elif name == "getConnectionVariableAsString":
                txt = "Returns a client's connection variable as string variable.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientID: the ID of the client\n@type clientID: int\n@return: a tuple, containing the errorcode and the value of the flag\n@rtype: tuple (int, string)\n"
            elif name == "getErrorMessage":
                txt = "Queries a printable error string for a specific error code.\n@param errorCode: The error code returned from all Client Lib functions\n@type errorCode: int\n@return: A tuple, containing the errorcode and the resulting string\n@rtype: tuple (int, string)\n"
            elif name == "requestChannelDelete":
                txt = "Deletes a channel.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelID: the ID of the channel to delete\n@type channelID: int\n@param force: if set to 1 (or True), the channel will be deleted even when it is not empty\n@type force: int or bool\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestComplainDel":
                txt = "Deletes a complain to a user by a different user.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param targetClientDatabaseID: the database ID of the complained user\n@type targetClientDatabaseID: int\n@param fromClientDatabaseID: the database ID of the complaining user\n@type fromClientDatabaseID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "isWhispering":
                txt = "Returns the status of a client whether he is currently whispering to the own client.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@return: a tuple, containing the errorcode and the status\n@rtype: tuple (int, int or bool)\n"
            elif name == "getParentChannelOfChannel":
                txt = "Returns the parent channel of another channel.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelID: the ID of the channel\n@type channelID: int\n@return: a tuple, containing the errorcode and the ID of the parent channel\n@rtype: tuple (int, int)\n"
            elif name == "getTransferFilePath":
                txt = "Returns the filepath of a filetransfer.\n@param transferID: the ID of the filetransfer\n@type transferID: int\n@return: a tuple, containing the errorcode and the filepath\n@rtype: tuple (int, string)\n"
            elif name == "sendFile":
                txt = "Starts a fileupload to the server.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelID: the ID of the channel in which the file will be placed in\n@type channelID: int\n@param channelPW: the password of the channel, pass an empty string if the channel is not password protected\n@type channelPW: string\n@param file: the complete path to the file in the channel\n@type file: string\n@param overwrite: if set to 1 (or True) and a file with that name already exists will be overwritten\n@type overwrite: int or bool\n@param resume: if set to 1 (or True), a previously started filetransfer can be resumed\n@type resume: int or bool\n@param sourceDirectory: the directory on the system, where the original file is placed in\n@type sourceDirectory: string\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: a tuple, containing the errorcode and the ID of the filetransfer\n@rtype: tuple (int, int)\n"
            elif name == "clientChatComposing":
                txt = "Sends the client chat composing command to a client the own client is currently chatting with.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientID: the ID of the client, the own client is chatting with\n@type clientID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestMuteClients":
                txt = "Mutes a list of clients.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientIDArray: a list of client IDs\n@type clientIDArray: list [int]\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestChannelGroupAdd":
                txt = "Adds a channelgroup.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param groupName: the name of the channelgroup to create\n@type groupName: string\n@param groupType: type of the channelgroup, see ts3defines.GroupType\n@type groupType: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestBanList":
                txt = "Requests the banlist on a server. The event onBanListEvent will be triggered.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestChannelGroupDelPerm":
                txt = "Deletes a list of permissions from a channelgroup.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelGroupID: the ID of the channelgroup\n@type channelGroupID: int\n@param continueOnError: if set to 1 (or True), if an error with a permission occurs, the other permissions will even though be handled\n@type continueOnError: int or bool\n@param permissionIDArray: a list of permission IDs\n@type permissionIDArray: list [int]\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getCurrentPlaybackDeviceName":
                txt = "Queries the current playback device's name on a serverconnection.\n@param serverConnectionHandlerID: ID of the serverconnection\n@type serverConnectionHandlerID: int\n@return: A tuple, containing the errorcode, the playback device's name and the status, if it's default\n@rtype: tuple (int, string, int)\n"
            elif name == "requestChannelSubscribe":
                txt = "Subscribes to a list of channels to get notifications of the clients in them.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelIDArray: a list of channel IDs\n@type channelIDArray: list [int]\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestClientSetWhisperList":
                txt = "Modifies the whisper list of a client.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientID: the ID of the client whose whisperlist is modified. If set to 0, the own whisper list is modified\n@type clientID: int\n@param targetChannelIDArray: a list of channel IDs the client will whisper to\n@type targetChannelIDArray: list [int]\n@param targetClientIDArray: a list of client IDs the client will whisper to\n@type targetClientIDArray: list [int]\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "setChannelVariableAsUInt64":
                txt = "Sets a channel variable to a new unsigned long long int value.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelID: the ID of the channel, pass 0 to set a new channel's variables\n@type channelID: int\n@param flag: the flag to set\n@type flag: int\n@param value: the new value\n@type value: int\n@return: the errorcode\n@rtype: int\n"
            elif name == "createBookmark":
                txt = "Creates a new bookmark.\n@param serverLabel: the label of the connection\n@type serverLabel: string\n@param serverAddress: host or ip address\n@type serverAddress: string\n@param serverPassword: password to the server, pass an empty string if the server is not password protected\n@type serverPassword: string\n@param nickname: the user's nickname\n@type nickname: string\n@param channel: complete path to the channel to connect to\n@type channel: string\n@param channelPassword: password to the channel, pass an empty string if the channel is not password protected\n@type channelPassword: string\n@param captureProfile: the name of the capture profile to use; pass an empty string to always use the default one\n@type captureProfile: string\n@param playbackProfile: the name of the playback profile to use; pass an empty string to always use the default one\n@type playbackProfile: string\n@param hotkeyProfile: the name of the hotkey profile to use; pass an empty string to always use the default one\n@type hotkeyProfile: string\n@param soundProfile: the name of the sound profile to use; pass an empty string to always use the default one\n@type soundProfile: string\n@param uniqueUserId: identity (name) to use; pass an empty string to always use the default one\n@type uniqueUserId: string\n@param oneTimeKey: privilege key to use on connect\n@type oneTimeKey: string\n@param phoneticName: phonetic nickname\n@type phoneticName: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestClientPermList":
                txt = "Requests the list of permissions assigned to a user. The events\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientDatabaseID: the database ID of the user\n@type clientDatabaseID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "acquireCustomPlaybackData":
                txt = "Retrieves playback data from the clientlib\n@param deviceName: the name of the playback device previously registered with registerCustomDevice\n@type deviceName: string\n@param samples: specifies how long the resultbuffer should be, which is passed to the clientlib\n@type samples: int\n@return: the errorcode\n@rtype: int\n"
            elif name == "pauseWaveFileHandle":
                txt = "Pauses a wavefile sound previously started with playWaveFileHandle.\n@param serverConnectionHandlerID: the ID of the serverConnection the sound is played on\n@type serverConnectionHandlerID: int\n@param waveHandle: the handle returned by playWaveFileHandle\n@type waveHandle: int\n@param pause: if set to 1 (or True), the sound will pause, 0 (or False) will unpause the sound\n@type pause: int or bool\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestChannelClientPermList":
                txt = "Requests the list of permissions of a user in a channel.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelID: the ID of the channel\n@type channelID: int\n@param clientDatabaseID: the database ID of the user\n@type clientDatabaseID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "systemset3DSettings":
                txt = "Adjust 3D sound system settings.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param distanceFactor: relative distance factor. Default is 1.0 = 1 meter\n@type distanceFactor: float\n@param rolloffScale: Scaling factor for 3D sound rolloff. Defines how fast sound volume will attenuate. As higher the value, as faster the sound is toned with increasing distance.\n@type rolloffScale: float\n@return: the errorcode\n@rtype: int\n"
            elif name == "verifyServerPassword":
                txt = "Verifies the password to a server. The result can be checked in onServerErrorEvent.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param serverPassword: the password to be verified\n@type serverPassword: string\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestServerGroupAdd":
                txt = "Adds a servergroup.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param groupName: the name of the group to create\n@type groupName: string\n@param groupType: type of the servergroup, see ts3defines.GroupType\n@type groupType: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getPlaybackDeviceList":
                txt = "Queries all available playback devices.\n@param modeID: Defines the playback mode to use.\n@type modeID: string\n@return: A tuple, containing the errorcode and the list of playback devices as tuple (devicename, deviceid)\n@rtype: tuple (int, [(string, string)])\n"
            elif name == "closeCaptureDevice":
                txt = "Closes a capture device on a serverconnection.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@return: the errorcode\n@rtype: int\n"
            elif name == "isReceivingWhisper":
                txt = "//FIXME:\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientID: the ID of the client\n@type clientID: int\n@return: a tuple, containing the errorcode and the status\n@rtype: tuple (int, int or bool)\n"
            elif name == "banadd":
                txt = "Adds a new ban.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param ipRegExp: regular expression to match IPs, pass an empty string to ignore IPs\n@type ipRegExp: string\n@param nameRegexp: regular expression to match client nicknames, pass an empty string to ignore nicknames\n@type nameRegexp: string\n@param uniqueIdentity: client UID to ban, pass an empty string to ignore UIDs\n@type uniqueIdentity: string\n@param timeInSeconds: the time, the client should be banned for, pass 0 to add a permanent ban\n@type timeInSeconds: int\n@param banReason: the reason for the ban\n@type banReason: string\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestServerGroupsByClientID":
                txt = "Requests all servergroups of a user defined by his database ID. The event onServerGroupByClientIDEvent will be triggered.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientDatabaseID: the database ID of the user\n@type clientDatabaseID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "stopVoiceRecording":
                txt = "Stops voice recording on a serverconnection\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@return: the errorcode\n@rtype: int\n"
            elif name == "getDirectories":
                txt = "Returns a list of subdirectories of a path as space-separated string.\n@param path: the parent path\n@type path: str\n@param maxLen: length of the buffer, passed to the clientlib to store the path to, default value is 256\n@type maxLen: int\n@return: the resulting path\n@rtype: string\n"
            elif name == "requestConnectionInfo":
                txt = "Requests the connection info of a client. The event onConnectionInfoEvent will be triggered.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientID: the ID of the client\n@type clientID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "showHotkeySetup":
                txt = "\n"
            elif name == "requestChannelDescription":
                txt = "Requests the channel description of a channel. Afterwards, getChannelVariableAsString can return it.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelID: the ID of the channel\n@type channelID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "spawnNewServerConnectionHandler":
                txt = "Creates a new server connection handler and receive its ID.\n@param port: Port the client should bind on. Specify zero to let the operating system chose any free port\n@type port: int\n@return: A tuple, containig the errorcode and the resulting ID\n@rtype: tuple (int, int)\n"
            elif name == "systemset3DListenerAttributes":
                txt = "Sets the position, velocity and orientation of the own client in 3D space\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param position: A tuple defining the 3D position, pass None to ignore\n@type position: tuple (float, float, float)\n@param forward: A tuple defining the forward orientation of the listener. The vector must be of unit length and perpendicular to the up vector. Pass None to ignore.\n@type forward: tuple (float, float, float)\n@param up: A tuple defining the upward orientation of the listener. The vector must be of unit length and perpendicular to the forward vector. Pass None to ignore.\n@type up: tuple (float, float, float)\n@return: the errorcode\n@rtype: int\n"
            elif name == "getTransferFileName":
                txt = "Returns the filename of a filetransfer.\n@param transferID: the ID of the filetransfer\n@type transferID: int\n@return: a tuple, containing the errorcode and the filename\n@rtype: tuple (int, string)\n"
            elif name == "requestFile":
                txt = "Starts a filedownload from the server.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelID: the ID of the channel in which the file is placed in\n@type channelID: int\n@param channelPW: the password of the channel, pass an empty string if the channel is not password protected\n@type channelPW: string\n@param file: the complete path to the file in the channel\n@type file: string\n@param overwrite: if set to 1 (or True) and a file with that name already exists will be overwritten\n@type overwrite: int or bool\n@param resume: if set to 1 (or True), a previously started filetransfer can be resumed\n@type resume: int or bool\n@param destinationDirectory: the path to the directory, where the downloaded fill will be placed in\n@type destinationDirectory: strin\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: a tuple, containing the errorcode and the ID of the filetransfer\n@rtype: tuple (int, int)\n"
            elif name == "requestClientNamefromDBID":
                txt = "Requests the name of a client defined by the database ID. The event onClientNamefromDBIDEvent will be triggered.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientDatabaseID: the database ID of the client\n@type clientDatabaseID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getServerConnectInfo":
                txt = "Returns the connect info (host, port and password) of a serverconnection.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param maxLen: length of the buffer, passed to the clientlib to store the path to, default value is 256\n@type maxLen: int\n@return: a tuple, containing the errorcode, the host, the port and the password of the serverconnection\n@rtype: tuple (int, string, int, string)\n"
            elif name == "bandelall":
                txt = "Deletes all bans on a server.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestPermissionList":
                txt = "Requests the list of permissions available on the server. The events onPermissionListEvent and onPermissionListFinishedEvent will be triggered.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getChannelVariableAsInt":
                txt = "Returns a channel variable as int value.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelID: the ID of the channel\n@type channelID: int\n@param flag: the flag to return\n@type flag: int\n@return: a tuple, containing the errorcode and the value of the flag\n@rtype: tuple (int, int)\n"
            elif name == "getServerConnectionHandlerList":
                txt = "Returns a list of serverconnection handlers.\n@return: a tuple, containing the errorcode and the list of serverconnection handler IDs\n@rtype: tuple (int, [int])\n"
            elif name == "activateCaptureDevice":
                txt = "Activates the capture device on a serverconnection.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestComplainAdd":
                txt = "Adds a complain to a user defined by his database ID.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param targetClientDatabaseID: the database ID of the user\n@type targetClientDatabaseID: int\n@param complainReason: the reason for the complain\n@type complainReason: string\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getChannelOfClient":
                txt = "Returns the channel of a client.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientID: the ID of the client\n@type clientID: int\n@return: a tuple, containing the errorcode and the channel\n@rtype: tuple (int, int)\n"
            elif name == "printMessageToCurrentTab":
                txt = "Prints a message to the currently visible tab.\n@param message: the message to send\n@type message: string\n"
            elif name == "requestUnmuteClients":
                txt = "Unmutes a list of clients.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientIDArray: a list of client IDs\n@type clientIDArray: list [int]\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "playWaveFileHandle":
                txt = "Plays a wavefile sound on a serverconnection and returns a handle to it.\n@param serverConnectionHandlerID: the ID of the serverconnection on which the sound will be played on\n@type serverConnectionHandlerID: int\n@param path: the path to the wavefile on the system\n@type path: string\n@param loop: if set to 1 (or True), the sound will loop\n@type loop: int or bool\n@return: A tuple, containing the errorcode and the handle, with which the sound can be paused and unpaused\n@rtype: tuple (int, int)\n"
            elif name == "requestComplainDelAll":
                txt = "Deletes all complains to a user.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param targetClientDatabaseID: the database ID of the user\n@type targetClientDatabaseID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "unregisterCustomDevice":
                txt = "Unregisters a custom device, previously registered with registerCustomDevice.\n@param deviceID: the ID of the device, used in registerCustomDevice\n@type deviceID: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestChannelClientAddPerm":
                txt = "Adds a list of permissions on a channel to a user.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelID: the ID of the channel\n@type channelID: int\n@param clientDatabaseID: the database ID of the user\n@type clientDatabaseID: int\n@param permissionIDArray: a list of permission IDs\n@type permissionIDArray: list [int]\n@param permissionValueArray: list of permission values, in order of the permissions in permissionIDArray\n@type permissionValueArray: list [int]\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestChannelUnsubscribe":
                txt = "Unsubscribes from a list channels.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelIDArray: a list of channel IDs\n@type channelIDArray: list [int]\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestHotkeyInputDialog":
                txt = "\n@param keyword:\n@type keyword:\n@param isDown:\n@type isDown:\n@param qParentWindow:\n@type qParentWindow:\n"
            elif name == "getServerVariableAsString":
                txt = "Returns a server variable as string value.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param flag: the flag to return\n@type flag: int\n@return: a tuple, containing the errorcode and the value of the flag\n@rtype: tuple (int, string)\n"
            elif name == "requestMessageList":
                txt = "Requests the list of offline messages. The event onMessageListEvent will be triggered.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getConnectionStatus":
                txt = "Returns the current connection status of a serverconnection.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@return: a tuple, containing the errorcode and the connection status\n@rtype: tuple (int, int)\n"
            elif name == "clientChatClosed":
                txt = "Sends the client chat closed command to a client the own client is currently chatting with.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientUniqueIdentifier: the uid of the own chatting client\n@type clientUniqueIdentifier: string\n@param clientID: the ID of the client, the own client is chatting with\n@type clientID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestClientDBIDfromUID":
                txt = "Requests the database ID of a client defined by the UID. The event onClientDBIDfromUIDEvent will be triggered.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientUniqueIdentifier: the UID of the client\n@type clientUniqueIdentifier: string\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestClientKickFromServer":
                txt = "Kicks a client from the server.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientID: the ID of the client to kick\n@type clientID: int\n@param kickReason: the reason for the kick\n@type kickReason: string\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return:\n@rtype:\n"
            elif name == "requestChannelSubscribeAll":
                txt = "Subscribes to all channels on the server.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getClientVariableAsInt":
                txt = "Returns the value of a given flag of a client as int value.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientID: the ID of the client\n@type clientID: int\n@param flag: the flag to return\n@type flag: int\n@return: a tuple, containing the errorcode and the value of the flag\n@rtype: tuple (int, int)\n"
            elif name == "requestServerGroupPermList":
                txt = "Requests the list of permissions assigned to a servergroup. The events onServerGroupPermListEvent and onServerGroupPermListFinishedEvent will be triggered.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param serverGroupID: the ID of the servergroup\n@type serverGroupID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "setClientSelfVariableAsString":
                txt = "Sets a variable of the own client to a new string value.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param flag: the flag to set\n@type flag: int\n@param value: the new value\n@type value: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestFileInfo":
                txt = "Requests the info to a file in a channel. The event onFileInfoEvent will be triggered.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelID: the ID of the channel\n@type channelID: int\n@param channelPW: the password of the channel, pass an empty string if the channel is not password protected\n@type channelPW: string\n@param file: the complete path to the file\n@type file: string\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getClientVariableAsString":
                txt = "Returns the value of a given flag of a client as string value.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientID: the ID of the client\n@type clientID: int\n@param flag: the flag to return\n@type flag: int\n@return: a tuple, containing the errorcode and the value of the flag\n@rtype: tuple (int, string)\n"
            elif name == "openPlaybackDevice":
                txt = "Opens a playback device on a serverconnection.\n@param serverConnectionHandlerID: ID of the serverconnection on which the playback device should be initialized on\n@type serverConnectionHandlerID: int\n@param modeID: the playback mode to use\n@type modeID: string\n@param playbackDevice: the id of the playback device\n@type playbackDevice: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getTransferFileSize":
                txt = "Returns the total filesize (in Bytes) of a filetransfer.\n@param transferID: the ID of the filetransfer\n@type transferID: int\n@return: a tuple, containing the errorcode and the filesize\n@rtype: tuple (int, int)\n"
            elif name == "getChannelList":
                txt = "Returns all channels on the server.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@return: a tuple, containing the errorcode and a list of channel IDs\n@rtype: tuple (int, [int])\n"
            elif name == "requestClientIDs":
                txt = "Requests the client IDs for a given UID. Will trigger the event onClientIDsEvent.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientUniqueIdentifier: the UID of the client\n@type clientUniqueIdentifier: string\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestServerTemporaryPasswordDel":
                txt = "Deletes an existing temporary password.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param password: the password to delete\n@type password: string\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return:\n@rtype:\n"
            elif name == "requestSendServerTextMsg":
                txt = "Sends a text message to all clients on the server.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param message: the message to send\n@type message: string\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestClientPoke":
                txt = "Pokes a client with a given message.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientID: the ID of the client\n@type clientID: int\n@param message: the message\n@type message: string\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestMessageAdd":
                txt = "Sends an offline message to another user.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param toClientUID: the UID of the user\n@type toClientUID: string\n@param subject: the subject of the message\n@type subject: string\n@param message: the message\n@type message: string\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getConnectionVariableAsUInt64":
                txt = "Returns a client's connection variable as unsigned long long int variable.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientID: the ID of the client\n@type clientID: int\n@return: a tuple, containing the errorcode and the value of the flag\n@rtype: tuple (int, int)\n"
            elif name == "privilegeKeyUse":
                txt = "Uses a privilege key as the current client of the serverconnection.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param tokenKey: the token\n@type tokenKey: string\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getClientNeededPermission":
                txt = "Returns the value of the client's needed permission.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param permissionName: name of the permission\n@type permissionName: string\n@return: a tuple, containing the errorcode and the value of the permission\n@rtype: tuple (int, int)\n"
            elif name == "getCurrentServerConnectionHandlerID":
                txt = "Returns the current serverconnection handler.\n@return: the ID of the current serverconnection handler\n@rtype: int\n"
            elif name == "initiateGracefulPlaybackShutdown":
                txt = "Graceful shutdown the playback device on a serverconnection.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@return: the errorcode\n@rtype: int\n"
            elif name == "getClientList":
                txt = "Returns all clients in view on the server.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@return: a tuple, containing the errorcode and the list of client IDs\n@rtype: tuple (int, [int])\n"
            elif name == "setPlaybackConfigValue":
                txt = "Sets a playback option.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param ident: the playback option to reset\n@type ident: string\n@param value: the value to set\n@type value: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "printMessage":
                txt = "Prints a message to a specific client chat tab.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param message: the message to print\n@type message: string\n@param messageTarget: the target to send the message, see ts3defines.PluginMessageTarget\n@type messageTarget: int\n"
            elif name == "getAverageTransferSpeed":
                txt = "Returns the average transfer speed of a filetransfer.\n@param transferID: the ID of the filetransfer\n@type transferID: int\n@return: a tuple, containing the errorcode and the speed\n@rtype: tuple (int, float)\n"
            elif name == "getDefaultCaptureDevice":
                txt = "Queries the default capture device.\n@param modeID: Defines the capture mode to use\n@type modeID: string\n@return: A tuple, containing the errorcode and the default capture device as tuple (devicename, deviceid)\n@rtype: tuple (int, (string, string))\n"
            elif name == "getClientID":
                txt = "Returns the own client ID on a given serverconnection.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@return: a tuple, containing the errorcode and the client ID\n@rtype: tuple (int, int)\n"
            elif name == "getPlaybackConfigValueAsFloat":
                txt = "Queries a playback option.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param ident: the playback option to be queried\n@type ident: string\n@return: A tuple, containing the errorcode and the flag's value\n@rtype: tuple (int, float)\n"
            elif name == "getCurrentCaptureDeviceName":
                txt = "Queries the current playback device's name on a serverconnection.\n@param serverConnectionHandlerID: ID of the serverconnection\n@type serverConnectionHandlerID: int\n@return: A tuple, containing the errorcode, the capture device's name and the status, if it's default\n@rtype: tuple (int, string, int)\n"
            elif name == "requestDeleteFile":
                txt = "Deletes a list of files in a channel.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelID: the ID of the channel\n@type channelID: int\n@param channelPW: the password of the channel, pass an empty string if channel is not password protected\n@type channelPW: string\n@param files: a list of complete pathes of the file to delete\n@type files: list [string]\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getDefaultCaptureMode":
                txt = "Queries the default capture mode.\n@return: A tuple, containing the errorcode and the default capture mode\n@rtype: tuple (int, string)\n"
            elif name == "setChannelVariableAsInt":
                txt = "Sets a channel variable to a new int value.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelID: the ID of the channel, pass 0 to set a new channel's variables\n@type channelID: int\n@param flag: the flag to set\n@type flag: int\n@param value: the new value\n@type value: int\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestClientDelPerm":
                txt = "Deletes a list of permissions from a user.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientDatabaseID: the database ID of the user\n@type clientDatabaseID: int\n@param permissionIDArray: a list of permission IDs\n@type permissionIDArray: list [int]\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getChannelVariableAsString":
                txt = "Returns a channel variable as string value.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelID: the ID of the channel\n@type channelID: int\n@param flag: the flag to return\n@type flag: int\n@return: a tuple, containing the errorcode and the value of the flag\n@rtype: tuple (int, int)\n"
            elif name == "startVoiceRecording":
                txt = "Starts voice recording on a serverconnection.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestClientEditDescription":
                txt = "Sets the description of a client.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientID: the ID of the client\n@type clientID: int\n@param clientDescription: the description to set\n@type clientDescription: string\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "isTransferSender":
                txt = "Returns the upload/download direction of a filetransfer.\n@param transferID: the ID of the filetransfer\n@type transferID: int\n@return: a tuple, containing the errorcode and 1 if it's an upload or 0 if it's a download\n@rtype: tuple (int, int or bool)\n"
            elif name == "logMessage":
                txt = "Logs a string.\n@param logMessage: Text which should be logged\n@type logMessage: string\n@param severity: The level of the message, warning or error. Defined by the class LogLevel\n@type severity: int\n@param channel: Custom text to categorize the message channel\n@type channel: string\n@param logID: ID of the serverconnection to identify the current server connection when using multiple connections, 0 if unused\n@type logID: int\n@return: The errorcode\n@rtype: int\n"
            elif name == "requestClientKickFromChannel":
                txt = "Kicks a client from its current channel to the default one.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientID: the ID of the client to kick\n@type clientID: int\n@param kickReason: the reason for the kick\n@type kickReason: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getEncodeConfigValue":
                txt = "Queries a speex encoder option.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param ident: the encoder option to be queried\n@type ident: string\n@return: A tuple, containing the errorcode and the flag's value\n@rtype: tuple (int, string)\n"
            elif name == "getChannelIDFromChannelNames":
                txt = "Returns the ID of a channel defined by its name.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelNameArray: list of strings, defining the position of the channel (['grandparent', 'parent', 'channel'])\n@type channelNameArray: list [string]\n@return: a tuple, containing the errorcode and the ID of the channel\n@rtype: tuple (int, int)\n"
            elif name == "clientPropertyStringToFlag":
                txt = "Converts a client property name used in strings (eg the serverquery) to the corresponding flag.\n@param clientPropertyString:\n@type clientPropertyString: string\n@return: a tuple, containing the errorcode and the flag (see ts3defines.ClientProperties and ts3defines.ClientPropertiesRare)\n@rtype: tuple (int, int)\n"
            elif name == "requestServerTemporaryPasswordAdd":
                txt = "Adds a temporary password to the server.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param password: the temporary password\n@type password: string\n@param description: the description of the temporary password\n@type description: string\n@param duration: the duration in seconds\n@type duration: int\n@param targetChannelID: the ID of the channel to which the accessing clients will join by default\n@type targetChannelID: int\n@param targetChannelPW: the password of the targetChannel, pass an empty string, if the channel is not password protected\n@type targetChannelPW: string\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "setChannelVariableAsString":
                txt = "Sets a channel variable to a new string value.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelID: the ID of the channel, pass 0 to set a new channel's variables\n@type channelID: int\n@param flag: the flag to set\n@type flag: int\n@param value: the new value\n@type value: int\n@return: the errorcode\n@rtype: int\n"
            elif name == "verifyChannelPassword":
                txt = "Verifies the password to a channel. The result can be checked in onServerErrorEvent.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelID: the ID of the channel\n@type channelID: int\n@param channelPassword: the password to be verified\n@type channelPassword: string\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestClientSetIsTalker":
                txt = "Grants or revokes the talker flag of a client.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientID: the ID of the client\n@type clientID: int\n@param isTalker: if set to 1 (or True) grants talker flag, if 0 (or False) revokes talker flag\n@type isTalker: int or bool\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "guiConnect":
                txt = "Connects to a server and displays it as tab in the client.\n@param connectTab: defines, which tab will be used, see ts3defines.PluginConnectTab\n@type connectTab: int\n@param serverLabel: the label of the connection\n@type serverLabel: string\n@param serverAddress: host or ip address\n@type serverAddress: string\n@param serverPassword: password to the server, pass an empty string if the server is not password protected\n@type serverPassword: string\n@param nickname: the user's nickname\n@type nickname: string\n@param channel: complete path to the channel to connect to\n@type channel: string\n@param channelPassword: password to the channel, pass an empty string if the channel is not password protected\n@type channelPassword: string\n@param captureProfile: the name of the capture profile to use\n@type captureProfile: string\n@param playbackProfile: the name of the playback profile to use\n@type playbackProfile: string\n@param hotkeyProfile: the name of the hotkey profile to use\n@type hotkeyProfile: string\n@param userIdentity: identity to use\n@type userIdentity: string\n@param oneTimeKey: privilege key to use on connect\n@type oneTimeKey: string\n@param phoneticName: phonetic nickname\n@type phoneticName: string\n@return: a tuple, containing the errorcode and the ID of the created serverconnection handler\n@rtype: tuple (int, int)\n"
            elif name == "getPreProcessorInfoValueFloat":
                txt = "Queries a sound preprocessor flag and returns it as float.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param ident: the flag to be queried\n@type ident: string\n@return: A tuple, containing the errorcode and the value of the queried flag\n@rtype: tuple (int, float)\n"
            elif name == "getClientDisplayName":
                txt = "Returns the client display name receiving from the client's contacts settings.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientID: the ID of the client\n@type clientID: int\n@param maxLen: length of the buffer, passed to the clientlib to store the path to, default value is 128\n@type maxLen: int\n@return: a tuple, containing the errorcode and the display name\n@rtype: tuple (int, string)\n"
            elif name == "getTransferRunTime":
                txt = "Returns the runtime of a filetransfer.\n@param transferID: the ID of the filetransfer\n@type transferID: int\n@return: a tuple, containing the errorcode and the runtime in seconds\n@rtype: tuple (int, int)\n"
            elif name == "requestSetClientChannelGroup":
                txt = "Adds a list of users to a list of channelgroups.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelGroupIDArray: a list of channelgroup IDs\n@type channelGroupIDArray: list [int]\n@param channelIDArray: a list of channel IDs\n@type channelIDArray: list [int]\n@param clientDatabaseIDArray: a list of client database IDs\n@type clientDatabaseIDArray: list [int]\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getAppPath":
                txt = "Returns the ts3 application path.\n@param maxLen: length of the buffer, passed to the clientlib to store the path to, default value is 256\n@type maxLen: int\n@return: the application path\n@rtype: string\n"
            elif name == "getCaptureDeviceList":
                txt = "Queries all available capture devices.\n@param modeID: Defines the capture mode to use.\n@type modeID: string\n@return: A tuple, containing the errorcode and the list of capture devices as tuple (devicename, deviceid)\n@rtype: tuple (int, [(string, string)])\n"
            elif name == "getDefaultPlaybackDevice":
                txt = "Queries the default playback device.\n@param modeID: Defines the playback mode to use\n@type modeID: string\n@return: A tuple, containing the errorcode and the default playback device as tuple (devicename, deviceid)\n@rtype: tuple (int, (string, string))\n"
            elif name == "requestClientMove":
                txt = "Moves a client to a different channel.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientID: the ID of the client to be moved\n@type clientID: int\n@param newChannelID: the ID of the channel moving the client to\n@type newChannelID: int\n@param password: password of the channel, leave empty if channel is not password protected\n@type password: string\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getCurrentCaptureMode":
                txt = "Queries the current capture mode on a serverconnection.\n@param serverConnectionHandlerID: ID of the serverconnection\n@type serverConnectionHandlerID: int\n@return: A tuple, containing the errorcode and the current capture mode\n@rtype: tuple (int, string)\n"
            elif name == "urlsToBB":
                txt = "Converts an url to the BB-code respresentation.\n@param text: the url\n@type text: string\n@param maxLen: length of the buffer, passed to the clientlib to store the path to, default value is 256\n@type maxLen: int\n@return: the BB-code representation\n@rtype: string\n"
            elif name == "requestChannelGroupList":
                txt = "Requests the list of channelgroups. The events onChannelGroupListEvent and onChannelGroupListEvent will be triggered.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestChannelUnsubscribeAll":
                txt = "Unsubscribes from all channels on the server.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getPluginPath":
                txt = "\n@param path:\n@type path:\n@param maxLen:\n@type maxLen:\n@param pluginID:\n@type pluginID:\n"
            elif name == "getClientLibVersion":
                txt = "Returns the clientlib's version as string.\n@return: A tuple, containing the errorcode and the result\n@rtype: tuple (int, string)\n"
            elif name == "getChannelVariableAsUInt64":
                txt = "Returns a channel variable as unsigned long long int value.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelID: the ID of the channel\n@type channelID: int\n@param flag: the flag to return\n@type flag: int\n@return: a tuple, containing the errorcode and the value of the flag\n@rtype: tuple (int, int)\n"
            elif name == "requestServerGroupAddPerm":
                txt = "Adds a list of permissions to a servergroup.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param serverGroupID: the ID of the servergroup\n@type serverGroupID: int\n@param continueonerror: if set to 1 (or True), if an error with a permission occurs, the other permissions will even though be handled\n@type continueonerror: int or bool\n@param permissionIDArray: list of permission IDs\n@type permissionIDArray: list [int]\n@param permissionValueArray: list of permission values, in order of the permissions in permissionIDArray\n@type permissionValueArray: list [int]\n@param permissionNegatedArray: list of permission negated values, in order of the permissions in permissionIDArray\n@type permissionNegatedArray: list [int]\n@param permissionSkipArray: list of permission skip values, in order of the permissions in permissionIDArray\n@type permissionSkipArray: list [int]\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestServerGroupDelPerm":
                txt = "Deletes a list of permissions from a servergroup.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param serverGroupID: the ID of the servergroup\n@type serverGroupID: int\n@param continueOnError: if set to 1 (or True), if an error with a permission occurs, the other permissions will even though be handled\n@type continueOnError: int or bool\n@param permissionIDArray: list of permission IDs\n@type permissionIDArray: list [int]\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getServerVariableAsInt":
                txt = "Returns a server variable as int value.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param flag: the flag to return\n@type flag: int\n@return: a tuple, containing the errorcode and the value of the flag\n@rtype: tuple (int, int)\n"
            elif name == "getDefaultPlayBackMode":
                txt = "Queries the default playback mode.\n@return: A tuple, containing the errorcode and the default playback mode\n@rtype: tuple (int, string)\n"
            elif name == "banclientdbid":
                txt = "Bans a user defined by his database ID.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientDBID: the database ID of the user\n@type clientDBID: int\n@param timeInSeconds: the time, the client should be banned for, pass 0 to add a permanent ban\n@type timeInSeconds: int\n@param banReason: the reason for the ban\n@type banReason: string\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "setClientVolumeModifier":
                txt = "Sets the volume modifier of a client.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientID: the client's ID\n@type clientID: int\n@param value: the value to set\n@type value: float\n@return: the errorcode\n@rtype: int\n"
            elif name == "serverPropertyStringToFlag":
                txt = "Converts a server property name used in strings (eg the serverquery) to the corresponding flag.\n@param serverPropertyString: the lowercase string representation\n@type serverPropertyString: str\n@return: a tuple, containing the errorcode and the flag (see ts3defines.ClientProperties and ts3defines.ClientPropertiesRare)\n@rtype: tuple (int, int)\n"
            elif name == "requestChannelClientDelPerm":
                txt = "Deletes a list of permissions of a user in a channel.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelID: the ID of the channel\n@type channelID: int\n@param clientDatabaseID: the database ID of the user\n@type clientDatabaseID: int\n@param permissionIDArray: a list of permission IDs\n@type permissionIDArray: list [int]\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestChannelDelPerm":
                txt = "Deletes a list of permissions from a channel.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelID: the ID of the channel\n@type channelID: int\n@param permissionIDArray: a list of permission IDs\n@type permissionIDArray: list [int]\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestServerGroupDelClient":
                txt = "Deletes a user defined by his database ID from a servergroup.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param serverGroupID: the ID of the servergroup\n@type serverGroupID: int\n@param clientDatabaseID: the database ID of the user\n@type clientDatabaseID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getProfileList":
                txt = "Returns a list of existing profiles and the default profile's index in list.\n@param profile: the profile type, see ts3defines.PluginGuiProfile\n@type profile: int\n@return: a tuple, containing the errorcode, the default profile's index and the profile list\n@rtype: tuple (int, int, [string])\n"
            elif name == "getCurrentTransferSpeed":
                txt = "Returns the current transfer speed of a filetransfer.\n@param transferID: the ID of the filetransfer\n@type transferID: int\n@return: a tuple, containing the errorcode and the speed\n@rtype: tuple (int, float)\n"
            elif name == "requestChannelAddPerm":
                txt = "Adds a list of permissions to a channel.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelID: the ID of the channel\n@type channelID: int\n@param permissionIDArray: a list of permission IDs\n@type permissionIDArray: list [int]\n@param permissionValueArray: list of permission values, in order of the permissions in permissionIDArray\n@type permissionValueArray: list [int]\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getConnectionVariableAsDouble":
                txt = "Returns a client's connection variable as python floating point variable.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientID: the ID of the client\n@type clientID: int\n@return: a tuple, containing the errorcode and the value of the flag\n@rtype: tuple (int, double)\n"
            elif name == "requestSendPrivateTextMsg":
                txt = "Sends a private text message to a client.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param message: the message to send\n@type message: string\n@param targetClientID: the ID of the client to send the message to\n@type targetClientID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestClientAddPerm":
                txt = "Adds a list of permissions to a user.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientDatabaseID: the database ID of the user\n@type clientDatabaseID: int\n@param permissionIDArray: a list of permission IDs\n@type permissionIDArray: list [int]\n@param permissionValueArray: list of permission values, in order of the permissions in permissionIDArray\n@type permissionValueArray: list [int]\n@param permissionSkipArray: list of permission skip values, in order of the permissions in permissionIDArray\n@type permissionSkipArray: list [int]\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestClientVariables":
                txt = "Requests latest data for a given client. The event onUpdateClientEvent will be triggered.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientID: the ID of the client\n@type clientID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "flushChannelCreation":
                txt = "Flushes the channel creation made by the setChannelVariable-functions to the server.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelParentID: the ID of the parent channel of the new channel\n@type channelParentID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestServerVariables":
                txt = "Requests all server variables of a serverconnection. The event onServerUpdatedEvent will be triggered.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestInfoUpdate":
                txt = "Requests to update the info data.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param itemType: specifies, which info data update is requested, see ts3defines.PluginItemType\n@type itemType: int\n@param itemID: the ID of the item to update (only usefull if itemType != ts3defines.PluginItemType.PLUGIN_MENU_TYPE_GLOBAL)\n@type itemID: int\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestCreateDirectory":
                txt = "Creates a directory in a channel.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelID: the ID of the channel\n@type channelID: int\n@param channelPW: the password of the channel, pass an empty string if channel is not password protected\n@type channelPW: string\n@param directoryPath: the complete path of the to be created directory\n@type directoryPath: string\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return:\n@rtype:\n"
            elif name == "requestMessageDel":
                txt = "Deletes an offline message.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param messageID: the ID of the message\n@type messageID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getResourcesPath":
                txt = "Returns the ts3 resources path.\n@param maxLen: length of the buffer, passed to the clientlib to store the path to, default value is 256\n@type maxLen: int\n@return: the resources path\n@rtype: string\n"
            elif name == "requestClientNamefromUID":
                txt = "Requests the name of a client defined by the UID. The event onClientNamefromUIDEvent will be triggered.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientUniqueIdentifier: the UID of the client\n@type clientUniqueIdentifier: string\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "processCustomCaptureData":
                txt = "Sends captured data from a custom device to the client libg\n@param deviceName: the name of the device capturing the data, previously registered with registerCustomDevice\n@type deviceName: string\n@param buffer: a list containing the buffered data\n@type buffer: list [int]\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestChannelMove":
                txt = "Moves a channel to a new parent channel.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelID: the ID of the channel to move\n@type channelID: int\n@param newChannelParentID: the ID of the new parent channel\n@type newChannelParentID: int\n@param newChannelOrder: Channel order defining where the channel should be sorted under the new parent. Pass 0 to sort the channel right after the parent\n@type newChannelOrder: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getClientSelfVariableAsInt":
                txt = "Returns the value of a given flag of the own client as int value.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param flag: the flag to return\n@type flag: int\n@return: a tuple, containing the errorcode and the value of the queried flag\n@rtype: tuple (int, int)\n"
            elif name == "registerCustomDevice":
                txt = "Registers a custom device, announcing the device ID and name to the Client Lib.\n@param deviceID: ID string of the custom device, under which the device can be later accessed\n@type deviceID: string\n@param deviceDisplayName: Displayed name of the custom device. Freely choose a name which identifies your device\n@type deviceDisplayName: string\n@param capFrequency: Frequency of the capture device\n@type capFrequency: int\n@param capChannels: Number of channels of the capture device. This value depends on if the used codec is a mono or stereo CodecEncryptionMode\n@type capChannels: int\n@param playFrequency: Frequency of the playback deviceDisplayName\n@type playFrequency: int\n@param playChannels: Number of channels of the playback device\n@type playChannels: int\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestFileList":
                txt = "Requests the filelist of a channel. The events onFileListEvent and onFileListFinishedEvent will be triggered.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelID: the ID of the channel\n@type channelID: int\n@param channelPW: the password of the channel, pass an empty string if the channel is not password protected\n@type channelPW: string\n@param path: the path of the directory to be listed, pass '/' for the root path\n@type path: string\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getTransferFileSizeDone":
                txt = "Returns the already downloaded size (in Bytes) of a filetransfer.\n@param transferID: the ID of the filetransfer\n@type transferID: int\n@return: a tuple, containing the errorcode and the size\n@rtype: tuple (int, int)\n"
            elif name == "requestServerGroupClientList":
                txt = "Requests the list of clients assigned to a servergroup. The event onServerGroupClientListEvent will be triggered.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param serverGroupID: the ID of the servergroup\n@type serverGroupID: int\n@param withNames: if set to 1 (or True), the event will contain the nick and uid of the user instead of empty strings\n@type withNames: int or bool\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getBookmarkList":
                txt = "Returns the list of bookmarks.\n@return: a tuple, containing the errorcode and a list of tuples (name, isFolder, uid, childs)\n@rtype: tuple (int, [tuple (string, int or bool, string or None, [childs])])\n"
            elif name == "bandel":
                txt = "Deletes a ban.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param banID: the ID of the ban\n@type banID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getServerVariableAsUInt64":
                txt = "Returns a server variable as unsigned long long int value.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param flag: the flag to return\n@type flag: int\n@return: a tuple, containing the errorcode and the value of the flag\n@rtype: tuple (int, int)\n"
            elif name == "requestIsTalker":
                txt = "Requests talk power or revokes the talk power request.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param isTalkerRequest: if set to 1 (or True) requests talk power, if 0 (or False) revokes the talk power request\n@type isTalkerRequest: int or bool\n@param isTalkerRequestMessage: the message of the request\n@type isTalkerRequestMessage: string\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getPermissionIDByName":
                txt = "Returns the ID of a permission defined by its name.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param permissionName: name of the permission\n@type permissionName: string\n@return: a tuple, containing the errorcode and the ID of the permission\n@rtype: tuple (int, int)\n"
            elif name == "set3DWaveAttributes":
                txt = "Positions a wave file that was opened previously with playWaveFileHandle in 3D space.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param waveHandle: handle of the played wavefile sound returned by playWaveFileHandle\n@type waveHandle: int\n@param position: A tuple defining the 3D position of the sound\n@type position: tuple (float, float, float)\n@return: the errorcod\n@rtype: int\n"
            elif name == "getClientSelfVariableAsString":
                txt = "Returns the value of a given flag of the own client as string.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param flag: the flag to return\n@type flag: int\n@return: a tuple, containing the errorcode and the value of the queried flag\n@rtype: tuple (int, string)\n"
            elif name == "requestComplainList":
                txt = "Requests the list of complains to a user. The event onComplainListEvent will be triggered.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param targetClientDatabaseID: the database ID of the user\n@type targetClientDatabaseID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestMessageUpdateFlag":
                txt = "Sets the message read/unread flag of an offline message\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param messageID: the ID of the message\n@type messageID: int\n@param flag: set to 0 to set message as unread, set to 1 to set message as read\n@type flag:\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getConfigPath":
                txt = "Returns the ts3 config path.\n@param maxLen: length of the buffer, passed to the clientlib to store the path to, default value is 256\n@type maxLen: int\n@return: the config path\n@rtype: string\n"
            elif name == "playWaveFile":
                txt = "Plays a wavefile sound on a serverconnection.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param path: the path to the wavefile on the system\n@type path: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "sendPluginCommand":
                txt = "Sends a plugin command to other users.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param command: the command string\n@type command: string\n@param targetMode: specifies, to whom the command will be send, see ts3defines.PluginTargetMode\n@type targetMode: int\n@param targetIDs: a list of client IDs, only needed if targetMode == ts3defines.PluginTargetMode.PluginCommandTarget_CLIENT\n@type targetIDs: list [int]\n"
            elif name == "getCurrentPlayBackMode":
                txt = "Queries the current playback mode on a serverconnection.\n@param serverConnectionHandlerID: ID of the serverconnection\n@type serverConnectionHandlerID: int\n@return: A tuple, containing the errorcode and the current playback mode\n@rtype: tuple (int, string)\n"
            elif name == "getPlaybackModeList":
                txt = "Queries all available playback modes.\n@return: A tuple, containing the errorcode and the list of modes\n@rtype: tuple (int, [string])\n"
            elif name == "requestPermissionOverview":
                txt = "Requests the permission overview of a user in a channel. The events onPermissionOverviewEvent and onPermissionOverviewFinishedEvent will be triggered.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientDBID: the database ID of the user\n@type clientDBID: int\n@param channelID: the ID of the channel\n@type channelID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestServerGroupList":
                txt = "Requests the list of servergroups. The events onServerGroupListEvent and onServerGroupListFinishedEvent will be triggered.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestSendClientQueryCommand":
                txt = "Requests to execute a clientquery command.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param command: the command to execute\n@type command: string\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "haltTransfer":
                txt = "Halts a currently running filetransfer.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param transferID: the ID of the filetransfer\n@type transferID: int\n@param deleteUnfinishedFile: if set to 1 (or True) and the file is not yet finished, it will be deleted; to prevent, pass 0 (or False)\n@type deleteUnfinishedFile: int or bool\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return:\n@rtype:\n"
            elif name == "closeWaveFileHandle":
                txt = "Closes a wavefile sound handle previously returned by playWaveFileHandle.\n@param serverConnectionHandlerID: the ID of the serverConnection the sound was played on\n@type serverConnectionHandlerID: int\n@param waveHandle: the handle returned by playWaveFileHandle\n@type waveHandle: int\n@return: the errorcode\n@rtype: int\n"
            elif name == "guiConnectBookmark":
                txt = "Connects to a server from a bookmark and displays it as tab in the client.\n@param connectTab: defines, which tab will be used, see ts3defines.PluginConnectTab\n@type connectTab: int\n@param bookmarkuuid: UID of the bookmark\n@type bookmarkuuid: string\n@return: a tuple, containing the errorcode and the ID of the created serverconnection handler\n@rtype: tuple (int, int)\n"
            elif name == "getClientVariableAsUInt64":
                txt = "Returns the value of a given flag of a client as unsigned long long int value.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientID: the ID of the client\n@type clientID: int\n@param flag: the flag to return\n@type flag: int\n@return: a tuple, containing the errorcode and the value of the flag\n@rtype: tuple (int, int)\n"
            elif name == "openCaptureDevice":
                txt = "Opens a playback device on a serverconnection.\n@param serverConnectionHandlerID: ID of the serverconnection on which the capture device should be initialized on\n@type serverConnectionHandlerID: int\n@param modeID: the playback mode to use\n@type modeID: string\n@param captureDevice: the id of the capture device\n@type captureDevice: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "cleanUpConnectionInfo":
                txt = "//FIXME:\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientID: the ID of the client\n@type clientID: int\n@return: the errorcode\n@rtype: int\n"
            elif name == "channelset3DAttributes":
                txt = "Adjusts a clients position and velocity in 3D space.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param clientID: the ID of the client to adjust\n@type clientID: int\n@param position: a tuple defining the position of the clientID\n@type position: tuple (float, float, float)\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestChannelGroupDel":
                txt = "Deletes a channelgroup.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelGroupID: the ID of the channelgroup\n@type channelGroupID: int\n@param force: if set to 1 (or True), even if there are users assigned to this channelgroup, it will be deleted\n@type force: int or bool\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "destroyServerConnectionHandler":
                txt = "Destroys a server connection handler.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@return: The errorcode\n@rtype: int\n"
            elif name == "requestServerTemporaryPasswordList":
                txt = "Requests a list of existing temporary passwords. The event onServerTemporaryPasswordListEvent will be triggered.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "requestChannelGroupPermList":
                txt = "Requests the list of permissions assigned to a channelgroup. The events onChannelGroupPermListEvent and onChannelGroupPermListFinishedEvent will be triggered.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelGroupID: the ID of the channelGroupID\n@type channelGroupID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "flushChannelUpdates":
                txt = "Flushes the changes made by the setChannelVariable-functions to the server.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelID: the ID of the channelID\n@type channelID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "channelPropertyStringToFlag":
                txt = "Converts a channel property name used in strings (eg the serverquery) to the corresponding flag.\n@param channelPropertyString:\n@type channelPropertyString: string\n@return: a tuple, containing the errorcode and the flag (see ts3defines.ChannelProperties and ts3defines.ChannelPropertiesRare)\n@rtype: tuple (int, int)\n"
            elif name == "requestChannelGroupAddPerm":
                txt = "Adds a list of permissions to a channelgroup.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelGroupID: the ID of the channelgroup\n@type channelGroupID: int\n@param continueonerror: if set to True, if an error with a permission occurs, the other permissions will even though be handled\n@type continueonerror: bool\n@param permissionIDArray: a list of permission IDs\n@type permissionIDArray: list [int]\n@param permissionValueArray: list of permission values, in order of the permissions in permissionIDArray\n@type permissionValueArray: list [int]\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "stopConnection":
                txt = "Stops the connection of a serverconnection.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param quitMessage: a message displayed when leaving the server encoded in UTF-8\n@type quitMessage: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "getChannelConnectInfo":
                txt = "Returns the channel connect info (path and password) of a channel.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param channelID: the ID of the channel\n@type channelID: int\n@param maxLen: length of the buffer, passed to the clientlib to store the path to, default value is 256\n@type maxLen: int\n@return: a tuple, containing the errorcode, the path and the password of a channel\n@rtype: tuple (int, string, string)\n"
            elif name == "requestMessageGet":
                txt = "Requests an offline message defined by its ID. The event onMessageGetEvent will be triggered.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param messageID: the ID of the message\n@type messageID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "setPreProcessorConfigValue":
                txt = "Sets a sound preprocessor flag.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param ident: the flag to be set\n@type ident: string\n@param value: the value to set the flag to\n@type value: string\n@return: the errorcode\n@rtype: int\n"
            elif name == "setClientSelfVariableAsInt":
                txt = "Sets a variable of the own client to a new int value.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param flag: the flag to set\n@type flag: int\n@param value: the new value\n@type value: int\n@return: the errorcode\n@rtype: int\n"
            elif name == "setPluginMenuEnabled":
                txt = "Enables or disables a menuitem. The menuID must be the global id, not the local id plugin developers set in menuItems. Retrieve it with PluginHost.globalMenuID.\n@param menuID: global id of the menuitem\n@type menuID: int\n@param enabled: set to True to enable it, False otherwise\n@type enabled: bool\n"
            elif name == "requestServerGroupAddClient":
                txt = "Adds a user defined by his database ID to a servergroup.\n@param serverConnectionHandlerID: the ID of the serverconnection\n@type serverConnectionHandlerID: int\n@param serverGroupID: the ID of the servergroup\n@type serverGroupID: int\n@param clientDatabaseID: the database ID of the user\n@type clientDatabaseID: int\n@param returnCode: returnCode passed to onServerErrorEvent or onServerPermissionErrorEvent. Optional.\n@type returnCode: string\n@return: the errorcode\n@rtype: int\n"

        if txt != "":
            for l in txt.split("\n"):
                print(l)

            return

    return pydochelp(obj)
